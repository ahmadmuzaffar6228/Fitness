"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var UserData_1 = require("../../Users/UserData/UserData");
var provider_1 = require("../../provider");
var nativescript_camera_1 = require("nativescript-camera");
var imageSourceModule = require("image-source");
var fs = require("file-system");
var imagePicker = require("nativescript-imagepicker");
var router_1 = require("@angular/router");
var Sqlite = require("nativescript-sqlite");
var OpenUrl = require("nativescript-openurl");
var SecondPageComponent = /** @class */ (function () {
    function SecondPageComponent(data, router) {
        this.data = data;
        this.router = router;
        this.imageIsOn = false;
        this.hideIcons = false;
        var obj = JSON.parse(JSON.stringify(this.data.storage));
        this.userData = new UserData_1.UserData(obj.username, obj.email);
        this.userData.image = "~/Images/blank.png";
        this.progressValue = 0;
        this.db();
    }
    SecondPageComponent.prototype.db = function () {
        var _this = this;
        (new Sqlite("Fitness.db")).then(function (db) {
            _this.database = db;
            _this.readData();
        }, function (error) {
            alert("DB ERROR");
            console.log("error: ", error);
        });
    };
    SecondPageComponent.prototype.readData = function () {
        var _this = this;
        this.database.all("SELECT * FROM Accounts").then(function (rows) {
            for (var row in rows) {
                if (_this.userData.email === rows[row][1]) {
                    var temp = new UserData_1.UserData("", "");
                    _this.id = rows[row][0];
                    console.log("Id : ", rows[row][0]);
                    console.log("Id : ", _this.id);
                    temp.age = rows[row][4];
                    temp.gender = rows[row][5];
                    temp.foot = rows[row][6];
                    temp.inches = rows[row][7];
                    temp.weight = rows[row][8];
                    temp.image = rows[row][9];
                    temp.bmi = _this.bmiCalculator(temp.foot, temp.inches, temp.weight);
                    _this.setData(temp);
                }
            }
        }, function (error) {
            console.log("Error : ", error);
            alert("Read Query ERROR");
        });
    };
    SecondPageComponent.prototype.videos = function (number) {
        if (number == 1) {
            OpenUrl("https://www.youtube.com/watch?v=PBC4n4-YnuY&index=2&list=PLLXmeIOBkPXReEHegdHUUR1QojD_7-WK-");
        }
        else if (number == 2) {
            OpenUrl("https://www.youtube.com/watch?v=_CZqfFMxQ4I&index=2&list=PLLXmeIOBkPXSfVneRcF4wafTA_rgYPdXW");
        }
        else if (number == 3) {
            OpenUrl("https://www.youtube.com/watch?v=lA7dbOmxs5I&t=9s");
        }
        else if (number == 4) {
            OpenUrl("https://www.youtube.com/watch?v=tfI6gs1jrHs");
        }
        else if (number == 5) {
            OpenUrl("https://www.youtube.com/watch?v=aJXfalSciFg");
        }
        else if (number == 6) {
            OpenUrl("https://www.youtube.com/watch?v=eVG-KfxPPbk");
        }
    };
    SecondPageComponent.prototype.bmiCalculator = function (foot, inch, weight) {
        var height = this.convertToMeters(foot, inch);
        var bmi = (weight / (height * height));
        return bmi;
    };
    SecondPageComponent.prototype.convertToMeters = function (foot, inch) {
        var heightInMeters = ((foot * 12) + inch) * 0.0254;
        return heightInMeters;
    };
    /*;
    ;
    ;
    this.barColor = "#008000";
    ;*/
    SecondPageComponent.prototype.setData = function (temp) {
        this.userData.age = temp.age;
        this.userData.gender = temp.gender;
        this.userData.weight = temp.weight;
        this.userData.foot = temp.foot;
        this.userData.inches = temp.inches;
        this.userData.image = temp.image;
        this.userData.bmi = temp.bmi;
        if (this.userData.bmi < 18.5) {
            this.bmiCategory = "Underweight";
            this.barColor = "#00FFFF";
            this.progressValue = 75;
            this.helpString = "We Recommend you to have a healthy daily diet to gain weight!! BEST OF LUCK";
        }
        else if (this.userData.bmi >= 18.5 && this.userData.bmi < 25) {
            this.bmiCategory = "Normal Weight";
            this.barColor = "#8C489F";
            this.progressValue = 100;
            this.helpString = "You have decent Statistics!! KEEP IT UP";
        }
        else if (this.userData.bmi >= 25 && this.userData.bmi < 30) {
            this.bmiCategory = "Overweight";
            this.barColor = "#FFFF00";
            this.progressValue = 60;
            this.helpString = "We Recommend you to start health related exercises to lose weight!! BEST OF LUCK";
        }
        else if (this.userData.bmi > 30) {
            this.bmiCategory = "Obesity";
            this.barColor = "#FF0000";
            this.helpString = "We Recommend you to start jogging or running on treadmill to lose dangerous obesity!! BEST OF LUCK";
            this.progressValue = 40;
        }
    };
    SecondPageComponent.prototype.toggleImage = function () {
        this.imageIsOn = !this.imageIsOn;
    };
    SecondPageComponent.prototype.toggleIcons = function () {
        this.hideIcons = !this.hideIcons;
    };
    SecondPageComponent.prototype.uploadImage = function () {
        var that = this;
        this.toggleImage();
        var context = imagePicker.create({
            mode: "single"
        });
        context.authorize().then(function () {
            return context.present();
        }).then(function (selection) {
            selection.forEach(function (select) {
                that.userData.image = select._android;
            });
        }, function (error) {
            alert("Couldn't upload Image");
        });
    };
    SecondPageComponent.prototype.takeImage = function () {
        var that = this;
        this.toggleImage();
        var milliseconds = (new Date).getTime();
        nativescript_camera_1.takePicture({ width: 450, height: 450, cameraFacing: "front" }).then(function (img) {
            var source = new imageSourceModule.ImageSource();
            source.fromAsset(img).then(function (source) {
                var folder = fs.knownFolders.documents();
                var path = fs.path.join(folder.path, "SaveImage" + milliseconds + ".jpeg");
                var saved = source.saveToFile(path, "jpeg");
                that.userData.image = path;
            });
        });
    };
    SecondPageComponent.prototype.saveDetails = function () {
        var _this = this;
        this.imageIsOn = false;
        this.toggleIcons();
        this.database.execSQL("UPDATE Accounts SET age=?, foot=?, inches=?, weight=? , gender=? , image=? WHERE id=? ", [this.userData.age, this.userData.foot, this.userData.inches, this.userData.weight, this.userData.gender, this.userData.image, this.id]).then(function (id) {
            alert("Details Saved Successfully");
            _this.readData();
        }, function (error) {
            console.log("Error: ", error);
            alert("Update Query Error");
        });
    };
    SecondPageComponent.prototype.clearDetails = function () {
        var _this = this;
        this.imageIsOn = false;
        this.toggleIcons();
        var obj = JSON.parse(JSON.stringify(this.data.storage));
        this.userData = new UserData_1.UserData(obj.username, obj.email);
        this.userData.image = "~/Images/blank.png";
        this.database.execSQL("UPDATE Accounts SET age=?, foot=?, inches=?, weight=? , gender=? , image=? WHERE id=? ", [this.userData.age, this.userData.foot, this.userData.inches, this.userData.weight, this.userData.gender, this.userData.image, this.id]).then(function (id) {
            alert("Details Saved Successfully");
            _this.readData();
        }, function (error) {
            console.log("Error: ", error);
            alert("Clear Query Error");
        });
    };
    SecondPageComponent.prototype.logout = function () {
        this.router.navigate(["/firstpage"]);
    };
    SecondPageComponent.prototype.done = function () {
        this.toggleIcons();
    };
    SecondPageComponent.prototype.removeImage = function () {
        this.userData.image = "~/Images/blank.png";
        this.database.execSQL("UPDATE Accounts SET image=? WHERE id=? ", [this.userData.image, this.id]).then(function (id) {
            alert("Details Saved Successfully");
        }, function (error) {
            console.log("Error: ", error);
            alert("Update Query Error");
        });
    };
    SecondPageComponent.prototype.navigateToChangeCredentialsPage = function () {
        this.router.navigate(["/changecredentialspage"]);
    };
    SecondPageComponent = __decorate([
        core_1.Component({
            selector: "secondpage",
            templateUrl: "./Pages/SecondPage/SecondPage.html",
            styleUrls: ["./Pages/SecondPage/SecondPage.css"]
        }),
        __metadata("design:paramtypes", [provider_1.Data, router_1.Router])
    ], SecondPageComponent);
    return SecondPageComponent;
}());
exports.SecondPageComponent = SecondPageComponent;
//# sourceMappingURL=data:application/json;base64,