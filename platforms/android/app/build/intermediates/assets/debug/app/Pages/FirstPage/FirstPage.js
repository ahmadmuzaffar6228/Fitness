"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var User_1 = require("../../Users/User/User");
var router_1 = require("@angular/router");
var page_1 = require("ui/page");
var provider_1 = require("../../provider");
var Sqlite = require("nativescript-sqlite");
var timerModule = require("tns-core-modules/timer");
var FirstPageComponent = /** @class */ (function () {
    function FirstPageComponent(router, page, data) {
        this.router = router;
        this.page = page;
        this.data = data;
        this.array = [];
        this.db();
        this.page.actionBarHidden = true;
        this.user = new User_1.User();
        this.isLogging = true;
    }
    FirstPageComponent.prototype.db = function () {
        var _this = this;
        (new Sqlite("Fitness.db")).then(function (db) {
            db.execSQL("CREATE TABLE IF NOT EXISTS loginCredentials (id INTEGER PRIMARY KEY AUTOINCREMENT, email TEXT NOT NULL, username TEXT NOT NULL, password TEXT NOT NULL)").then(function (id) {
                _this.database = db;
                _this.readQuery();
            }, function (error) {
                alert("DB ERROR");
            });
        }, function (error) {
            alert("DB ERROR");
        });
    };
    FirstPageComponent.prototype.readQuery = function () {
        var _this = this;
        var i = 0;
        this.database.all("SELECT * FROM loginCredentials").then(function (rows) {
            for (var row in rows) {
                var tempUser = new User_1.User();
                tempUser.email = rows[row][1];
                tempUser.username = rows[row][2];
                tempUser.password = rows[row][3];
                _this.array[i] = tempUser;
                i++;
            }
        }, function (error) {
            alert("Select Query Error");
        });
    };
    FirstPageComponent.prototype.writeQuery = function () {
        var _this = this;
        this.database.execSQL("INSERT INTO loginCredentials (email, username, password) VALUES (?, ?, ?)", [this.user.email, this.user.username, this.user.password]).then(function (id) {
            alert("Your Account has been Created Successfully!!");
            _this.toggleForm();
        }, function (error) {
            alert("Insert Query Error");
        });
    };
    FirstPageComponent.prototype.checkUser = function (user) {
        var count = 0;
        for (var k = 0; k < this.array.length; k++) {
            if (user.email == this.array[k].email) {
                count = 2;
                break;
            }
            if (user.username == this.array[k].username) {
                count = 1;
            }
        }
        return count;
    };
    FirstPageComponent.prototype.toggleForm = function () {
        this.isLogging = !this.isLogging;
    };
    FirstPageComponent.prototype.clearTextboxes = function () {
        this.user.username = "";
        this.user.email = "";
        this.user.password = "";
    };
    FirstPageComponent.prototype.submit = function () {
        if (this.isLogging) {
            this.login();
        }
        else {
            this.signup();
        }
    };
    FirstPageComponent.prototype.login = function () {
        var count = 0;
        if (!this.user.username || !this.user.password) {
            alert("Kindly Provide Every Field");
            return;
        }
        else {
            this.readQuery();
            for (var i = 0; i < this.array.length; i++) {
                if (this.user.username === this.array[i].username && this.user.password === this.array[i].password) {
                    count = 1;
                    this.data.storage = {
                        "username": this.array[i].username,
                        "email": this.array[i].email
                    };
                    this.router.navigate(["/secondpage"]);
                    break;
                }
            }
            if (count == 0) {
                alert("Account Not Found");
            }
        }
    };
    FirstPageComponent.prototype.signup = function () {
        if (!this.user.username || !this.user.email || !this.user.password) {
            alert("Kindly Provide Every Field");
            return;
        }
        else {
            var checkResult = this.checkUser(this.user);
            if (checkResult == 0) {
                this.writeQuery();
            }
            else if (checkResult == 1) {
                alert("Username Already Taken.... Kindly Choose another one");
            }
            else if (checkResult == 2) {
                alert("Account with Email: " + this.user.email + " Already Created...Can not Create New One!!");
            }
        }
        this.readQuery();
    };
    FirstPageComponent = __decorate([
        core_1.Component({
            selector: "firstpage",
            templateUrl: "./Pages/FirstPage/FirstPage.html",
            styleUrls: ["./Pages/FirstPage/FirstPage.css"]
        }),
        __metadata("design:paramtypes", [router_1.Router, page_1.Page, provider_1.Data])
    ], FirstPageComponent);
    return FirstPageComponent;
}());
exports.FirstPageComponent = FirstPageComponent;
//# sourceMappingURL=data:application/json;base64,